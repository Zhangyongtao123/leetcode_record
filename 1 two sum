//方法一, 挨个遍历确定第一个数，然后二分查找确定第二个数，O(nlogn)
class Solution {
 public:
	 vector<int> twoSum(vector<int>& nums, int target) {
		 vector<std::pair<int, int>> new_nums;
		 vector<int> result(2, -1);
		 for (int i = 0; i<nums.size(); i++) {
			 new_nums.push_back(std::make_pair(nums[i], i));
		 }
		 std::sort(new_nums.begin(), new_nums.end(), cmp);
		 int target2;
		 for (int i = 0; i<new_nums.size(); i++) {
			 result[0] = new_nums[i].second;
			 target2 = target - new_nums[i].first;
			 int id = binary_search(new_nums, i + 1, nums.size() - 1, target2);
			 if (id != -1) {
				 result[1] = id;
				 return result;
			 }
		 }
		 return result;
	 }
 private:
	 static bool cmp(std::pair<int, int> &a, std::pair<int, int> &b) {
		 return a.first<b.first;
	 }

	 int binary_search(vector<std::pair<int, int>> new_nums, int begin, int end, int target) {
		 while (begin <= end) {
			 if (new_nums[begin].first>target || new_nums[end].first<target) {
				 return -1;
			 }
			 int mid = (begin + end) / 2;
			 if (new_nums[mid].first == target) {
				 return new_nums[mid].second;
			 }
			 else if (new_nums[mid].first > target) {
				 end = mid - 1;
			 }
			 else {
				 begin = mid + 1;
			 }
		 }
		 return -1;
	 }
 };
 
 //方法二，用hash来做，时间复杂度为O(n)。
 //注意使用find()函数确定某个键值在hash表中是否存在
 //std::map内部使用红黑树实现，内部元素是有序的，适合有顺序要求的问题。
 //std::unordered_map内部使用hash实现，内部元素无序，适合查找问题。
 //注意即使输入数组中有两个一样的元素也没关系（比如target =2, 有两个元素1），因为根据题目条件只可能一样的元素至多存在两个，而我们是通过遍历确定其中一个元素的下标，
 //	另一个下标通过map确定，只要这两个下标不同就满足要求。这可能也是这个题目的特殊性所在
 class Solution2 {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        unordered_map<int, int> map;
        for(size_t i = 0; i < nums.size(); ++i) {
            map[nums[i]] = i;
        }
        for(int i = 0; i < nums.size(); ++i) {
            int target2 = target -nums[i]; 
            if(map.find(target2)!= map.end() && i != map[target2]) {
                return {i, map[target2]};
            }
        }
        return vector<int>();
    }
};
